** Notes ** 
AngularJS utilizes the paradigm of MV*

Custom Attributes - attributes outside of the attributes browsers are designed to use (style, class, id, etc). These attributes can be accessed through JavaScript utilizing the attr tag. (i.e. document.getElement('whatever').attr('attr-name'))

AngularJS utilizes the 'ng' prefix to access custom attributes 

Dependancy Injection - Giving the function an object. Rather than creating an pbject inside of a function, we pass an object to a function

All AngularJS services start with a '$'

The Scope Service - An AngularJS object that is injected into the application.

Minification Shrinking the size of files for faster download - adding '.min' to denote that a file os smaller 

Interpolation - Creating a string by combining strings and placeholders 

Directive - An instruction to AngularJS to manipulate a piece of the DOM - i.e add a class or hide something or create an element

Watchers and the Digest Loop
Watcher - AngularJS way of keeping track of a value.
Digest Loop - Similar to the event loop but relates to any DOM change and performs the corrisponding change that is required

Built In Directives
ng-if: normal if statement and will remove DOM elements that dont match the evaluation
ng-show: will hide the DOM element with the ng-hide directive. Will not remove that element.

XMLHTTPRequest Object 

Singleton - The one an only copy of an object 

Normailize - To make consistent to a standard

Section1 - Basics of AngularJS
Section2 - Routing & Templating in AngularJS
Section3 - Directives

@ - used for sending text values to directives
= - used for two way binding and directives

& - denotes a function within a directive
: {{ functionName({ objectMappedName: objectToBePassed }) }}

Compile and Link - when building code, the compiler converts the code to a lower level language, then the linker generates a file that the computer will actually interact with.

Transclusion - Include one document inside another

Transpile - Converting source code of one programming language into another